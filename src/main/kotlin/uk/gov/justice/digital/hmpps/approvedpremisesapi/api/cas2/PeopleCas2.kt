/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.OASysRiskOfSeriousHarm
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.OASysRiskToSelf
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Person
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PersonRisks
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RestController
interface PeopleCas2 {

    fun getDelegate(): PeopleCas2Delegate = object: PeopleCas2Delegate {}

    @Operation(
        tags = ["People operations",],
        summary = "Returns the Risk To Individual (known as Risk to Self on frontend) section of an OASys.",
        operationId = "peopleCrnOasysRiskToSelfGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = OASysRiskToSelf::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/people/{crn}/oasys/risk-to-self"],
            produces = ["application/json"]
    )
    fun peopleCrnOasysRiskToSelfGet(@Parameter(description = "CRN of the Person to fetch latest OASys", required = true) @PathVariable("crn") crn: kotlin.String): ResponseEntity<OASysRiskToSelf> {
        return getDelegate().peopleCrnOasysRiskToSelfGet(crn)
    }

    @Operation(
        tags = ["People operations",],
        summary = "Returns the Risk of Serious Harm section of an OASys.",
        operationId = "peopleCrnOasysRoshGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = OASysRiskOfSeriousHarm::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/people/{crn}/oasys/rosh"],
            produces = ["application/json"]
    )
    fun peopleCrnOasysRoshGet(@Parameter(description = "CRN of the Person to fetch latest OASys", required = true) @PathVariable("crn") crn: kotlin.String): ResponseEntity<OASysRiskOfSeriousHarm> {
        return getDelegate().peopleCrnOasysRoshGet(crn)
    }

    @Operation(
        tags = ["People operations",],
        summary = "Returns the risks for a Person",
        operationId = "peopleCrnRisksGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = PersonRisks::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/people/{crn}/risks"],
            produces = ["application/json", "application/problem+json"]
    )
    fun peopleCrnRisksGet(@Parameter(description = "CRN of the Person to fetch risks for", required = true) @PathVariable("crn") crn: kotlin.String): ResponseEntity<PersonRisks> {
        return getDelegate().peopleCrnRisksGet(crn)
    }

    @Operation(
        tags = ["People operations",],
        summary = "Searches for a Person by their Prison Number (NOMIS ID)",
        operationId = "peopleSearchGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Person::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/people/search"],
            produces = ["application/json", "application/problem+json"]
    )
    fun peopleSearchGet( @RequestParam(value = "nomsNumber", required = true) nomsNumber: kotlin.String): ResponseEntity<Person> {
        return getDelegate().peopleSearchGet(nomsNumber)
    }
}

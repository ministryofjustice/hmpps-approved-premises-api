/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3BookingCancelledEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3BookingCancelledUpdatedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3BookingConfirmedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3BookingProvisionallyMadeEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3PersonArrivedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3PersonArrivedUpdatedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3PersonDepartedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3PersonDepartureUpdatedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.CAS3ReferralSubmittedEvent
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.events.cas3.model.Problem
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import java.util.UUID
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*

@RestController
interface CAS3EventsApi {

    fun getDelegate(): CAS3EventsApiDelegate = object: CAS3EventsApiDelegate {}

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'booking-cancelled' event",
        operationId = "eventsCas3BookingCancelledEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'booking-cancelled' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3BookingCancelledEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'booking-cancelled' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/booking-cancelled/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3BookingCancelledEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3BookingCancelledEvent> {
        return getDelegate().eventsCas3BookingCancelledEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'booking-cancelled-updated' event",
        operationId = "eventsCas3BookingCancelledUpdatedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'booking-cancelled-updated' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3BookingCancelledUpdatedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'booking-cancelled-updated' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/booking-cancelled-updated/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3BookingCancelledUpdatedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3BookingCancelledUpdatedEvent> {
        return getDelegate().eventsCas3BookingCancelledUpdatedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'booking-confirmed' event",
        operationId = "eventsCas3BookingConfirmedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'booking-confirmed' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3BookingConfirmedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'booking-confirmed' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/booking-confirmed/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3BookingConfirmedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3BookingConfirmedEvent> {
        return getDelegate().eventsCas3BookingConfirmedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'booking-provisionally-made' event",
        operationId = "eventsCas3BookingProvisionallyMadeEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'booking-provisionally-made' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3BookingProvisionallyMadeEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'person-arrived' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/booking-provisionally-made/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3BookingProvisionallyMadeEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3BookingProvisionallyMadeEvent> {
        return getDelegate().eventsCas3BookingProvisionallyMadeEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'person-arrived' event",
        operationId = "eventsCas3PersonArrivedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'person-arrived' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3PersonArrivedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'person-arrived' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/person-arrived/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3PersonArrivedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3PersonArrivedEvent> {
        return getDelegate().eventsCas3PersonArrivedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'person-arrived-updated' event",
        operationId = "eventsCas3PersonArrivedUpdatedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'person-arrived-updated' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3PersonArrivedUpdatedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'person-arrived-updated' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/person-arrived-updated/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3PersonArrivedUpdatedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3PersonArrivedUpdatedEvent> {
        return getDelegate().eventsCas3PersonArrivedUpdatedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'person-departed' event",
        operationId = "eventsCas3PersonDepartedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'person-departed' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3PersonDepartedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'person-departed' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/person-departed/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3PersonDepartedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3PersonDepartedEvent> {
        return getDelegate().eventsCas3PersonDepartedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'person-departure-updated' event",
        operationId = "eventsCas3PersonDepartureUpdatedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'person-departure-updated' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3PersonDepartureUpdatedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'person-departure-updated' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/person-departure-updated/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3PersonDepartureUpdatedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3PersonDepartureUpdatedEvent> {
        return getDelegate().eventsCas3PersonDepartureUpdatedEventIdGet(eventId)
    }

    @Operation(
        tags = ["CAS3 events",],
        summary = "A 'referral-submitted' event",
        operationId = "eventsCas3ReferralSubmittedEventIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "The 'referral-submitted' event corresponding to the provided `eventId`", content = [Content(schema = Schema(implementation = CAS3ReferralSubmittedEvent::class))]),
            ApiResponse(responseCode = "404", description = "No 'referral-submitted' event found for the provided `eventId`", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/events/cas3/referral-submitted/{eventId}"],
            produces = ["application/json"]
    )
    fun eventsCas3ReferralSubmittedEventIdGet(@Parameter(description = "UUID of the event", required = true) @PathVariable("eventId") eventId: UUID): ResponseEntity<CAS3ReferralSubmittedEvent> {
        return getDelegate().eventsCas3ReferralSubmittedEventIdGet(eventId)
    }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1ApprovedPremisesGender
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1BedDetail
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremiseCapacity
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1Premises
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremisesBasicSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremisesBedSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremisesDaySummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1SpaceBookingCharacteristic
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1SpaceBookingDaySummarySortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.StaffMember
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RestController
interface PremisesCas1 {

    fun getDelegate(): PremisesCas1Delegate = object: PremisesCas1Delegate {}

    @Operation(
        tags = ["Premises",],
        summary = "Gets a given bed for a given premises",
        operationId = "getBed",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1BedDetail::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/beds/{bedId}"],
            produces = ["application/json"]
    )
    fun getBed(@Parameter(description = "ID of the premises that the bed is in", required = true) @PathVariable("premisesId") premisesId: java.util.UUID,@Parameter(description = "ID of the bed to return", required = true) @PathVariable("bedId") bedId: java.util.UUID): ResponseEntity<Cas1BedDetail> {
        return getDelegate().getBed(premisesId, bedId)
    }

    @Operation(
        tags = ["premises",],
        summary = "Lists all beds for the given premises",
        operationId = "getBeds",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PremisesBedSummary::class)))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/beds"],
            produces = ["application/json"]
    )
    fun getBeds(@Parameter(description = "ID of the premises to list the beds for", required = true) @PathVariable("premisesId") premisesId: java.util.UUID): ResponseEntity<List<Cas1PremisesBedSummary>> {
        return getDelegate().getBeds(premisesId)
    }

    @Operation(
        tags = ["premises",],
        summary = "Provides capacity information for a given date range for all premises",
        operationId = "getCapacities",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PremiseCapacity::class)))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "one or more invalid premises IDs", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/capacity"],
            produces = ["application/json", "application/problem+json"]
    )
    fun getCapacities( @RequestParam(value = "startDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) startDate: java.time.LocalDate, @RequestParam(value = "endDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) endDate: java.time.LocalDate): ResponseEntity<List<Cas1PremiseCapacity>> {
        return getDelegate().getCapacities(startDate, endDate)
    }

    @Operation(
        tags = ["premises",],
        summary = "Provides capacity information for a given date range",
        operationId = "getCapacity",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PremiseCapacity::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "invalid premises ID or booking ID", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/capacity"],
            produces = ["application/json", "application/problem+json"]
    )
    fun getCapacity(@Parameter(description = "ID of the premises", required = true) @PathVariable("premisesId") premisesId: java.util.UUID, @RequestParam(value = "startDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) startDate: java.time.LocalDate, @RequestParam(value = "endDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) endDate: java.time.LocalDate, @RequestParam(value = "excludeSpaceBookingId", required = false) excludeSpaceBookingId: java.util.UUID?): ResponseEntity<Cas1PremiseCapacity> {
        return getDelegate().getCapacity(premisesId, startDate, endDate, excludeSpaceBookingId)
    }

    @Operation(
        tags = ["premises",],
        summary = "Provides a summary of capacity, space bookings and out of service beds for a premise on a given day",
        operationId = "getDaySummary",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PremisesDaySummary::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/day-summary/{date}"],
            produces = ["application/json"]
    )
    fun getDaySummary(@Parameter(description = "ID of the premises", required = true) @PathVariable("premisesId") premisesId: java.util.UUID,@Parameter(description = "date the summary is required for", required = true) @PathVariable("date") date: java.time.LocalDate, @RequestParam(value = "bookingsCriteriaFilter", required = false) bookingsCriteriaFilter: kotlin.collections.List<Cas1SpaceBookingCharacteristic>?, @RequestParam(value = "bookingsSortDirection", required = false) bookingsSortDirection: SortDirection?, @RequestParam(value = "bookingsSortBy", required = false) bookingsSortBy: Cas1SpaceBookingDaySummarySortField?, @RequestParam(value = "excludeSpaceBookingId", required = false) excludeSpaceBookingId: java.util.UUID?): ResponseEntity<Cas1PremisesDaySummary> {
        return getDelegate().getDaySummary(premisesId, date, bookingsCriteriaFilter, bookingsSortDirection, bookingsSortBy, excludeSpaceBookingId)
    }

    @Operation(
        tags = ["premises",],
        summary = "Returns a CSV showing premises occupancy for the next 30 days. This does not consider characteristics.",
        operationId = "getOccupancyReport",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "Successfully retrieved the report", content = [Content(schema = Schema(implementation = org.springframework.core.io.Resource::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/occupancy-report"],
            produces = ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]
    )
    fun getOccupancyReport(): ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> {
        return getDelegate().getOccupancyReport()
    }

    @Operation(
        tags = ["premises",],
        summary = "Returns premises information",
        operationId = "getPremisesById",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1Premises::class))]),
            ApiResponse(responseCode = "404", description = "invalid premises ID", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}"],
            produces = ["application/json"]
    )
    fun getPremisesById(@Parameter(description = "", required = true) @PathVariable("premisesId") premisesId: java.util.UUID): ResponseEntity<Cas1Premises> {
        return getDelegate().getPremisesById(premisesId)
    }

    @Operation(
        tags = ["premises",],
        summary = "",
        operationId = "getPremisesSummaries",
        description = """Provide a summary of all premises, with optional filtering""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PremisesBasicSummary::class)))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/summary"],
            produces = ["application/json", "application/problem+json"]
    )
    fun getPremisesSummaries( @RequestParam(value = "gender", required = false) gender: Cas1ApprovedPremisesGender?, @RequestParam(value = "apAreaId", required = false) apAreaId: java.util.UUID?, @RequestParam(value = "cruManagementAreaId", required = false) cruManagementAreaId: java.util.UUID?): ResponseEntity<List<Cas1PremisesBasicSummary>> {
        return getDelegate().getPremisesSummaries(gender, apAreaId, cruManagementAreaId)
    }

    @Operation(
        tags = ["Premises",],
        summary = "Returns the staff that work at an approved premises",
        operationId = "getStaff",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = StaffMember::class)))]),
            ApiResponse(responseCode = "404", description = "invalid premises ID", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/staff"],
            produces = ["application/json"]
    )
    fun getStaff(@Parameter(description = "ID of the premises to return staff for", required = true) @PathVariable("premisesId") premisesId: java.util.UUID): ResponseEntity<List<StaffMember>> {
        return getDelegate().getStaff(premisesId)
    }
}

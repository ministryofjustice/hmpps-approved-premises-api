/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2v2

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ApplicationOrigin
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas2v2ApplicationSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.NewCas2v2Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.UpdateApplication
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RestController
interface ApplicationsCas2v2 {

    fun getDelegate(): ApplicationsCas2v2Delegate = object: ApplicationsCas2v2Delegate {}

    @Operation(
        tags = ["Operations on CAS2 version 2 applications",],
        summary = "Abandons an in progress CAS2 version 2 application",
        operationId = "applicationsApplicationIdAbandonPut",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation"),
            ApiResponse(responseCode = "409", description = "The application has been submitted", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/applications/{applicationId}/abandon"],
            produces = ["application/json"]
    )
    fun applicationsApplicationIdAbandonPut(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID): ResponseEntity<Unit> {
        return getDelegate().applicationsApplicationIdAbandonPut(applicationId)
    }

    @Operation(
        tags = ["Operations on CAS2 version 2 applications",],
        summary = "Gets a single CAS2 version 2 application by its ID",
        operationId = "applicationsApplicationIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Application::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/applications/{applicationId}"],
            produces = ["application/json"]
    )
    fun applicationsApplicationIdGet(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID): ResponseEntity<Application> {
        return getDelegate().applicationsApplicationIdGet(applicationId)
    }

    @Operation(
        tags = ["Operations on CAS2 version 2 applications",],
        summary = "Updates a CAS2 version 2 application",
        operationId = "applicationsApplicationIdPut",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Application::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/applications/{applicationId}"],
            produces = ["application/json", "application/problem+json"],
            consumes = ["application/json"]
    )
    fun applicationsApplicationIdPut(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID,@Parameter(description = "Information to update the application with", required = true) @RequestBody body: UpdateApplication): ResponseEntity<Application> {
        return getDelegate().applicationsApplicationIdPut(applicationId, body)
    }

    @Operation(
        tags = ["Operations on CAS2 version 2 applications",],
        summary = "List summaries of all CAS2 version 2 applications authorised for the logged in user",
        operationId = "applicationsGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas2v2ApplicationSummary::class)))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/applications"],
            produces = ["application/json"]
    )
    fun applicationsGet( @RequestParam(value = "isSubmitted", required = false) isSubmitted: kotlin.Boolean?, @RequestParam(value = "page", required = false) page: kotlin.Int?, @RequestParam(value = "prisonCode", required = false) prisonCode: kotlin.String?, applicationOrigin: ApplicationOrigin?, @RequestParam(value = "limitByUser", required = false, defaultValue = "true") limitByUser: kotlin.Boolean): ResponseEntity<List<Cas2v2ApplicationSummary>> {
        return getDelegate().applicationsGet(isSubmitted, page, prisonCode, applicationOrigin, limitByUser)
    }

    @Operation(
        tags = ["Operations on CAS2 version 2 applications",],
        summary = "Creates a CAS2 version 2 application",
        operationId = "applicationsPost",
        description = """""",
        responses = [
            ApiResponse(responseCode = "201", description = "successful operation", content = [Content(schema = Schema(implementation = Application::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/applications"],
            produces = ["application/json", "application/problem+json"],
            consumes = ["application/json"]
    )
    fun applicationsPost(@Parameter(description = "Information to create a blank application with", required = true) @RequestBody body: NewCas2v2Application): ResponseEntity<Application> {
        return getDelegate().applicationsPost(body)
    }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.ArraySchema
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1NewOutOfServiceBed
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1NewOutOfServiceBedCancellation
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1OutOfServiceBed
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1OutOfServiceBedCancellation
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1OutOfServiceBedSortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Temporality
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.UpdateCas1OutOfServiceBed
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError

@RestController
interface OutOfServiceBedsCas1 {

  fun getDelegate(): OutOfServiceBedsCas1Delegate = object : OutOfServiceBedsCas1Delegate {}

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Posts a cancellation to a specified out-of-service bed",
    operationId = "cancelOutOfServiceBed",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1OutOfServiceBedCancellation::class))]),
      ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
      ApiResponse(responseCode = "404", description = "invalid premises ID or out-of-service bed ID", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.POST],
    value = ["/premises/{premisesId}/out-of-service-beds/{outOfServiceBedId}/cancellations"],
    produces = ["application/json", "application/problem+json"],
    consumes = ["application/json"],
  )
  fun cancelOutOfServiceBed(@Parameter(description = "ID of the premises the cancellation is related to", required = true) @PathVariable("premisesId") premisesId: java.util.UUID, @Parameter(description = "ID of the out-of-service bed", required = true) @PathVariable("outOfServiceBedId") outOfServiceBedId: java.util.UUID, @Parameter(description = "details of the cancellation", required = true) @RequestBody body: Cas1NewOutOfServiceBedCancellation): ResponseEntity<Cas1OutOfServiceBedCancellation> = getDelegate().cancelOutOfServiceBed(premisesId, outOfServiceBedId, body)

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Posts an out-of-service bed to a specified approved premises",
    operationId = "createOutOfServiceBed",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1OutOfServiceBed::class))]),
      ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
      ApiResponse(responseCode = "404", description = "invalid premises ID or booking ID", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.POST],
    value = ["/premises/{premisesId}/out-of-service-beds"],
    produces = ["application/json", "application/problem+json"],
    consumes = ["application/json"],
  )
  fun createOutOfServiceBed(@Parameter(description = "ID of the premises the out-of-service bed is related to", required = true) @PathVariable("premisesId") premisesId: java.util.UUID, @Parameter(description = "details of the out-of-service bed", required = true) @RequestBody body: Cas1NewOutOfServiceBed): ResponseEntity<Cas1OutOfServiceBed> = getDelegate().createOutOfServiceBed(premisesId, body)

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Returns a specific out-of-service bed for a premises",
    operationId = "getOutOfServiceBed",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1OutOfServiceBed::class))]),
      ApiResponse(responseCode = "404", description = "invalid premises or out-of-service bed ID", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/premises/{premisesId}/out-of-service-beds/{outOfServiceBedId}"],
    produces = ["application/json"],
  )
  fun getOutOfServiceBed(@Parameter(description = "ID of the premises the out-of-service bed is related to", required = true) @PathVariable("premisesId") premisesId: java.util.UUID, @Parameter(description = "ID of the out-of-service bed", required = true) @PathVariable("outOfServiceBedId") outOfServiceBedId: java.util.UUID): ResponseEntity<Cas1OutOfServiceBed> = getDelegate().getOutOfServiceBed(premisesId, outOfServiceBedId)

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Lists all Out-Of-Service Beds entries",
    operationId = "getOutOfServiceBeds",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1OutOfServiceBed::class)))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/out-of-service-beds"],
    produces = ["application/json"],
  )
  fun getOutOfServiceBeds(@RequestParam(value = "temporality", required = false) temporality: kotlin.collections.List<Temporality>?, @RequestParam(value = "premisesId", required = false) premisesId: java.util.UUID?, @RequestParam(value = "apAreaId", required = false) apAreaId: java.util.UUID?, @RequestParam(value = "sortDirection", required = false) sortDirection: SortDirection?, @RequestParam(value = "sortBy", required = false) sortBy: Cas1OutOfServiceBedSortField?, @RequestParam(value = "page", required = false) page: kotlin.Int?, @RequestParam(value = "perPage", required = false) perPage: kotlin.Int?): ResponseEntity<List<Cas1OutOfServiceBed>> = getDelegate().getOutOfServiceBeds(temporality, premisesId, apAreaId, sortDirection, sortBy, page, perPage)

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Lists all Out-Of-Service Beds entries for the Premises",
    operationId = "getOutOfServiceBedsForPremises",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1OutOfServiceBed::class)))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/premises/{premisesId}/out-of-service-beds"],
    produces = ["application/json"],
  )
  fun getOutOfServiceBedsForPremises(@Parameter(description = "ID of the premises to show out-of-service beds for", required = true) @PathVariable("premisesId") premisesId: java.util.UUID): ResponseEntity<List<Cas1OutOfServiceBed>> = getDelegate().getOutOfServiceBedsForPremises(premisesId)

  @Operation(
    tags = ["out-of-service beds"],
    summary = "Updates an out-of-service bed for a premises",
    operationId = "updateOutOfServiceBed",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1OutOfServiceBed::class))]),
      ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
      ApiResponse(responseCode = "404", description = "invalid premises ID or booking ID", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.PUT],
    value = ["/premises/{premisesId}/out-of-service-beds/{outOfServiceBedId}"],
    produces = ["application/json", "application/problem+json"],
    consumes = ["application/json"],
  )
  fun updateOutOfServiceBed(@Parameter(description = "ID of the premises the out-of-service bed is related to", required = true) @PathVariable("premisesId") premisesId: java.util.UUID, @Parameter(description = "ID of the out-of-service bed", required = true) @PathVariable("outOfServiceBedId") outOfServiceBedId: java.util.UUID, @Parameter(description = "details of the out-of-service bed", required = true) @RequestBody body: UpdateCas1OutOfServiceBed): ResponseEntity<Cas1OutOfServiceBed> = getDelegate().updateOutOfServiceBed(premisesId, outOfServiceBedId, body)
}

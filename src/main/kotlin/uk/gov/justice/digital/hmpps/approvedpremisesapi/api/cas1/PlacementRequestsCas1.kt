/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PlacementRequestDetail
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PlacementRequestSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1WithdrawPlacementRequest
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestRequestType
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestSortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestStatus
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.RiskTierLevel
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import kotlin.collections.List

@RestController
interface PlacementRequestsCas1 {

  fun getDelegate(): PlacementRequestsCas1Delegate = object : PlacementRequestsCas1Delegate {}

  @Operation(
    tags = ["Placement requests"],
    summary = "Gets placement requests for a given user",
    operationId = "getPlacementRequest",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successfully retrieved placement requests", content = [Content(schema = Schema(implementation = Cas1PlacementRequestDetail::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/placement-requests/{id}"],
    produces = ["application/json"],
  )
  fun getPlacementRequest(@Parameter(description = "ID of the placement request", required = true) @PathVariable("id") id: java.util.UUID): ResponseEntity<Cas1PlacementRequestDetail> = getDelegate().getPlacementRequest(id)

  @Operation(
    tags = ["Placement requests"],
    summary = "Gets all placement requests",
    operationId = "search",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successfully retrieved placement requests", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PlacementRequestSummary::class)))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/placement-requests"],
    produces = ["application/json"],
  )
  fun search(@RequestParam(value = "status", required = false) status: PlacementRequestStatus?, @RequestParam(value = "crnOrName", required = false) crnOrName: kotlin.String?, @RequestParam(value = "tier", required = false) tier: RiskTierLevel?, @RequestParam(value = "arrivalDateStart", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) arrivalDateStart: java.time.LocalDate?, @RequestParam(value = "arrivalDateEnd", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) arrivalDateEnd: java.time.LocalDate?, @RequestParam(value = "requestType", required = false) requestType: PlacementRequestRequestType?, @RequestParam(value = "cruManagementAreaId", required = false) cruManagementAreaId: java.util.UUID?, @RequestParam(value = "page", required = false) page: kotlin.Int?, @RequestParam(value = "sortBy", required = false) sortBy: PlacementRequestSortField?, @RequestParam(value = "sortDirection", required = false) sortDirection: SortDirection?): ResponseEntity<List<Cas1PlacementRequestSummary>> = getDelegate().search(status, crnOrName, tier, arrivalDateStart, arrivalDateEnd, requestType, cruManagementAreaId, page, sortBy, sortDirection)

  @Operation(
    tags = ["Placement requests"],
    summary = "Withdraws a placement request",
    operationId = "withdrawPlacementRequest",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PlacementRequestDetail::class))]),
      ApiResponse(responseCode = "404", description = "invalid applicationId", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.POST],
    value = ["/placement-requests/{id}/withdrawal"],
    produces = ["application/json"],
    consumes = ["application/json"],
  )
  fun withdrawPlacementRequest(@Parameter(description = "ID of the placement request", required = true) @PathVariable("id") id: java.util.UUID, @Parameter(description = "Withdrawal details") @RequestBody(required = false) body: Cas1WithdrawPlacementRequest?): ResponseEntity<Cas1PlacementRequestDetail> = getDelegate().withdrawPlacementRequest(id, body)
}

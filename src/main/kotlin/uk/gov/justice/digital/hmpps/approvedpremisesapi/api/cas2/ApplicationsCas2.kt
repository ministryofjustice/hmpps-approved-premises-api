/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2

import uk.gov.justice.digital.hmpps.approvedpremisesapi.cas2.model.generated.AssignmentType
import uk.gov.justice.digital.hmpps.approvedpremisesapi.cas2.model.generated.Cas2Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.cas2.model.generated.Cas2ApplicationSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.NewApplication
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.cas2.model.generated.UpdateCas2Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*


import kotlin.collections.List

@RestController
interface ApplicationsCas2 {

    fun getDelegate(): ApplicationsCas2Delegate = object: ApplicationsCas2Delegate {}

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "Abandons an in progress CAS2 application",
        operationId = "abandonCas2Application",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation"),
            ApiResponse(responseCode = "409", description = "The application has been submitted", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/applications/{applicationId}/abandon"],
            produces = ["application/json"]
    )
    fun abandonCas2Application(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID): ResponseEntity<Unit> {
        return getDelegate().abandonCas2Application(applicationId)
    }

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "Creates a CAS2 application",
        operationId = "createCas2Application",
        description = """""",
        responses = [
            ApiResponse(responseCode = "201", description = "successful operation", content = [Content(schema = Schema(implementation = Cas2Application::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "404", description = "invalid CRN", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/applications"],
            produces = ["application/json", "application/problem+json"],
            consumes = ["application/json"]
    )
    fun createCas2Application(@Parameter(description = "Information to create a blank application with", required = true) @RequestBody body: NewApplication): ResponseEntity<Cas2Application> {
        return getDelegate().createCas2Application(body)
    }

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "Gets a single CAS2 application by its ID",
        operationId = "getCas2Application",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas2Application::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/applications/{applicationId}"],
            produces = ["application/json"]
    )
    fun getCas2Application(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID): ResponseEntity<Cas2Application> {
        return getDelegate().getCas2Application(applicationId)
    }

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "List summaries of all CAS2 applications authorised for the logged in user",
        operationId = "getCas2ApplicationSummaries",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas2ApplicationSummary::class)))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/applications"],
            produces = ["application/json"]
    )
    fun getCas2ApplicationSummaries( @RequestParam(value = "assignmentType", required = true) assignmentType: AssignmentType, @RequestParam(value = "page", required = false) page: kotlin.Int?): ResponseEntity<List<Cas2ApplicationSummary>> {
        return getDelegate().getCas2ApplicationSummaries(assignmentType, page)
    }

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "Updates a CAS2 application",
        operationId = "updateCas2Application",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas2Application::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/applications/{applicationId}"],
            produces = ["application/json", "application/problem+json"],
            consumes = ["application/json"]
    )
    fun updateCas2Application(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID,@Parameter(description = "Information to update the application with", required = true) @RequestBody body: UpdateCas2Application): ResponseEntity<Cas2Application> {
        return getDelegate().updateCas2Application(applicationId, body)
    }
}
